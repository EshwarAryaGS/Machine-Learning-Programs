import  matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.cluster import KMeans
import sklearn.metrics as sm
import pandas as pd
import numpy as np

iris = datasets.load_iris()
print("\n IRIS DATA:",iris.data);

X = pd.DataFrame(iris.data)
X.columns = ['Sepal_Length','Sepal_Width','Petal_Length','Petal_Width']
y = pd.DataFrame(iris.target)
y.columns = ['Targets']

model = KMeans(n_clusters=3)
model.fit(X)

plt.figure(figsize=(14,14))

colormap = np.array(['red','lime','black'])

plt.subplot(2,2,1)
plt.scatter(X.Petal_Length, X.Petal_Width, c=colormap[y.Targets], s=40)
plt.title('REAL CLUSTERS')
plt.xlabel('PETAL LENGTH')
plt.ylabel('PETAL WIDTH')


plt.subplot(2,2,2)
plt.scatter(X.Petal_Length, X.Petal_Width, c=colormap[model.labels_], s=40)
plt.title('KMEANS CLUSTERING')
plt.xlabel('PETAL LENGTH')
plt.ylabel('PETAL WIDTH')
sm1 = sm.accuracy_score(y,model.labels_)
print(sm1)
print(sm.confusion_matrix(y,model.labels_))


from sklearn import preprocessing

scaler = preprocessing.StandardScaler()
scaler.fit(X)
xsa = scaler.transform(X)
xs = pd.DataFrame(xsa,columns = X.columns)

from sklearn.mixture import GaussianMixture
gmm = GaussianMixture(n_components=3)
gmm.fit(xs)
gmm_y = gmm.predict(xs)

plt.subplot(2,2,3)
plt.scatter(X.Petal_Length, X.Petal_Width, c=colormap[gmm_y], s=40)
plt.title('GM CLUSTERING')
plt.xlabel('PETAL LENGTH')
plt.ylabel('PETAL WIDTH')
print(sm.accuracy_score(y,gmm_y))
print(sm.confusion_matrix(y,gmm_y))

print('observations: GM using EM algorithm based Clustering matched the true labels  more closely than the KMmeans.')

