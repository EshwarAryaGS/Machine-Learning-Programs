import numpy as np
X=np.array([[1,0,1,0],[1,0,1,1],[0,1,0,1]])
y=np.array([[1],[1],[0]])

def sigmoid (x):
    return 1/(1 + np.exp(-x))


def derivatives_sigmoid(x):
    return x * (1 - x)

epoch=5000
lr=0.1
inputlayer_neurons = 4
hiddenlayer_neurons = 3
output_neurons = 1

wh=np.random.uniform(size=(inputlayer_neurons,hiddenlayer_neurons))
bh=np.random.uniform(size=(1,hiddenlayer_neurons))
wout=np.random.uniform(size=(hiddenlayer_neurons,output_neurons))
bout=np.random.uniform(size=(1,output_neurons))

for i in range(epoch):
   
    hiddenlayerip1 = np.dot(X,wh)
    hiddenlayerip = hiddenlayerip1 + bh
    hiddenlayeract = sigmoid(hiddenlayerip)
   
    outputlayerip1 = np.dot(hiddenlayeract,wout)
    outputlayerip = outputlayerip1+ bout
    output = sigmoid(outputlayerip)
   
    slopeoutput = derivatives_sigmoid(output)
    slopehidden = derivatives_sigmoid(hiddenlayeract)
   
    E = y-output
    doutput = E * slopeoutput
   
    Ehidden = doutput.dot(wout.T)
    dhidden = Ehidden * slopehidden
   
    wout += hiddenlayeract.T.dot(doutput) *lr
    wh += X.T.dot(dhidden) *lr
   
    bout += np.sum(doutput, axis=0,keepdims=True) *lr
    bh += np.sum(dhidden, axis=0,keepdims=True) *lr
   
print("Input:\n" + str(X))  
print("Actual output: \n" + str(y))
print("Predicted output:")
print (output)
    
OUTPUT :
Input:
[[1 0 1 0]
 [1 0 1 1]
 [0 1 0 1]]
Actual output: 
[[1]
 [1]
 [0]]
Predicted output:
[[0.97833611]
 [0.9677996 ]
 [0.04734595]]
